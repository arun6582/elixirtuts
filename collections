List functions

Most of list is covered in basics, functions, recursion chapters
> List.foldl([1,2,3], "", fn value, acc -> "#{value}(#{acc})" end)  # -> "3(2(1()))"
> List.foldr([1,2,3], "", fn value, acc -> "#{value}(#{acc})" end)  # -> "1(2(3()))"

Note: Replace is a costly operation
> List.replace_at([1,2,3,4,4,6], 4, 5)  # -> [1, 2, 3, 4, 5, 6]

List.keyfind only gives the first occurence
> List.keyfind([{:rane, 34, "python"}, {:amitu, 36, "rust"}, {:deepak, 35, "python"}], :rane, 0)    # -> {:rane, 34, "python"}
> List.keyfind([{:rane, 34, "python"}, {:amitu, 36, "rust"}, {:deepak, 35, "python"}], "python", 2) # -> {:rane, 34, "python"}

Others: List.keyreplace, List.keydelete

Data structures:
    Maps: Fast key-value lookup
    Keyword: Non-unique keys, Ordered
    Struct: Fixed number of fields

Keywords:
- Since they are ordered and lookups work only for atoms, they are often used as context to functions

```
defmodule Canvas do
    @defaults [ fg: "black", bg: "white", font: "Merriweather" ]

    def draw_text(text, options \\ []) do
        options = Keyword.merge(@defaults, options)

        IO.puts "Drawing text #{inspect(text)}"
        IO.puts "Foreground: #{options[:fg]}"
        IO.puts "Background: #{Keyword.get(options, :bg)}"
        IO.puts "Font: #{Keyword.get(options, :font)}"
        IO.puts "Pattern: #{Keyword.get(options, :pattern, "solid")}"
        IO.puts "Style: #{inspect Keyword.get_values(options, :style)}"
    end
end

Canvas.draw_text("hello", fg: "red", style: "italic", style: "bold")
```

Map:

> map = %{ name: "Dave", likes: "Programming", where: "Dallas" }
> Map.keys map          # -> [:likes, :name, :where]
> Map.values map        # -> ["Programming", "Dave", "Dallas"]
> map[:name]            # -> "Dave"
> map.name              # -> "Dave"
> map1 = Map.drop map, [:where, :likes]     # -> %{name: "Dave"}
> map2 = Map.put map, :also_likes, "Ruby"   # -> %{also_likes: "Ruby", likes: "Programming", name: "Dave", where: "Dallas"}
> Map.keys map2         # -> [:also_likes, :likes, :name, :where]
> Map.has_key? map1, :where     # -> false
> { value, updated_map } = Map.pop map2, :also_likes    # -> {"Ruby", %{likes: "Programming", name: "Dave", where: "Dallas"}}
> Map.equal? map, updated_map   # -> true


person = %{ name: "Dave", height: 1.88 }
> %{ name: a_name } = person   # ->  assigns a_name to value of person.name
> %{ something: a_name } = person   # -> MatchError

> %{ name: _, height: _ } = person  # ->  matches, does not give MatchError

NOTE: You cannot BIND keys, only values can be bound via pattern matching, this also happens to be a good practice in other languages

List Comprehension

people = [
    %{ name: "abhas", department: "aero", city: "kota"  },
    %{ name: "shyam", department: "aero", city: "patna" },
    %{ name: "hemant", department: "chem", city: "vizag" },
    %{ name: "rahul", department: "chem", city: "indore" },
    %{ name: "akhil", department:  "chem", city: "kota" },
]

> aero_guys = for person = %{ department: dept} <- people, dept == "aero", do: person

- The generator clause bind each map in the list to person and binds the department to dept
- the filter selector only those dept where dept value is "aero", do returns the matches

> item = List.first people  # -> item = %{city: "kota", department: "aero", name: "abhas"}

> for key <- [:city, :name] do
    %{ ^key => value } = item
    value
    end

# -> ["kota", "abhas"]


Updates on Map:

> new_map = %{ old_map | key1 => value1,  key2 = value2, ...}
Notes: This doesn't support adding new keys, can only update old keys


Struct:

- They are like typed maps, keys cannot be added later and has default values and behaviours

defmodule Attendee do

    defstruct name: "", paid: false, over_18: true

    def may_attend_after_party(attendee = %Attendee{}) do
        attendee.paid && attendee.over_18
    end

    def print_vip_badge(%Attendee{name: name}) when name !=
        IO.puts "Very cheap badge for #{name}"
    end

    def print_vip_badge(%Attendee{}) do
        raise "missing name for badge"
    end

end

> s1 = %Subscriber{}                            # ->  %Subscriber{name: "", over_18: true, paid: false}
> s2 = %Subscriber{ name: "Dave" }              # ->  %Subscriber{name: "Dave", over_18: true, paid: false}
> s3 = %Subscriber{ name: "Mary", paid: true }  # -> %Subscriber{name: "Mary", over_18: true, paid: true}

> s3.name       #-> "Mary

- Updating
> s4 = %Subscriber{ s3 | name: "Marie"}"        # -> %Subscriber{name: "Marie", over_18: true, paid: true}

> Attendee.may_attend_after_party(s4)

Nested Structs

```
defmodule Customer do
    defstruct name: "", company: ""
end

defmodule BugReport do
    defstruct owner: %Customer{}, details: "", severity: 1
end
```

> report = %BugReport{owner: %Customer{name: "Dave", company: "Pragmatic"}, details: "broken" }

- Accessing attributes
> report.owner.company

- Modifying a nested attribute is PAINFUL
> report = %BugReport{ report | owner: %Customer{ report.owner | company: "PragProg" }}

- Elixir gives a macro to do the above
NOTE: Macros generate the same erlang code in elixir during compile time

> put_in(report.owner.company, "PragProg")
OR
> put_in(report[:owner][:company], "PragProg")

> update_in(report.owner.name, &("Mr." <>  &1))     # -> runs a lambda on the variable
OR
> update_in(report[:owner][:name], &("Mr." <> &1))

put_in and update_in also offer non-macro runtime code to access fields in runtime

> get_in(report, [:owner, :name])
> put_in(report, [:owner, :name, :first], "Dev")


Access module (awesome module to put/update)

```
cast = [
    %{
        character: "Buttercup",
        actor: %{
            first: "Robin",
            last: "Wright"
        },
        role: "princess"
    },
    %{
        character: "Westley",
        actor: %{
            first: "Cary",
            last: "Elwes"
        },
        role: "farm boy"
    }
]
```

> get_in(cast, [Access.all(), :character])      # -> ["Buttercup", "Westley"]
> get_in(cast, [Access.at(1), :role])           # -> "farm boy"

> get_and_update_in(cast, [Access.all(), :actor, :last], fn (val) -> {val, String.upcase(val)} end) # -> Makes last name all caps

> get_in(cast, [Access.all(), :actor, Access.elem(1)])      # -> ["Wright", "Elwes"]

> IO.inspect get_and_update_in(cast, [Access.key(:buttercup), :role], fn (val) -> {val, "Queen"} end)  # -> Changes buttercup's role to Queen

> {popped_value, rest_} = Access.pop(%{name: "Elixir", creator: "Valim", type: "Superhuman"}, :name)
        # -> popped_value = "Elixir", rest = %{creator: "Valim", type: "Superhuman"}


Sets (implemented as MapSet)

> set1 = 1..5 |> Enum.into(MapSet.new)
